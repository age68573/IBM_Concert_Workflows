name: Linux_Keystore_Cert_Renewal
platform: node
blocks:
  - action: system/Common/Config Data/Get Config Data
    name: GetKeystorePass
    inputs:
      - name: authKey
        value: $passwordMap
  - name: Function_1
    function: |-
      if (!$tomcatPath) {
        throw new Error(' "400 Bad Request" \n {"error": "Missing required field: Tomcat path"}');
      }else if(!$validity) {
        throw new Error(' "400 Bad Request" \n {"error": "Missing required field: Validity"}');
      }
  - action: foreach
    name: ForEachCert
    list: $certificates
    blocks:
      - action: comment
        value: 'Get keystore name from input '
      - action: assign
        name: GetKeyStoreName
        variable: $keystore
        value: (JSON.parse($ForEachCert.item.additional_data).keystore_path || "")
      - action: comment
        value: Get keystore password from config auth set by user -  using keystore
          path as key
      - name: StorePass
        function: |-
          const keystore = $keystore
          const passwordMap = $GetKeystorePass.result

          $storepass = passwordMap[keystore] || "";
      - action: comment
        value: Script to renew the cert and restart tomcat application running.
      - action: system/Ansible/Playbook
        name: RenewalScript
        inputs:
          - name: authKey
            value: $ansibleAuth
          - name: playbook
            value: |-
              `---
              - name: Renew certificate in Java keystore and restart Tomcat (Linux)
                hosts: canary
                become: yes
                vars:
                  aliasName: ${JSON.stringify($ForEachCert.item.metadata.alias)}
                  keystore_path: ${JSON.stringify($keystore)}
                  jkspath: "{{ keystore_path.split('/')[:-1] | join('/') }}"
                  storepass: ${JSON.stringify($storepass)}
                  validity: ${JSON.stringify($validity)}
                  tomcat_path: ${JSON.stringify($tomcatPath)}
                  apachebin_path: "{{ tomcat_path }}/bin"
                  tomcat_service: "tomcat"

                tasks:

                  - name: Set Java path into environment
                    set_fact:
                      java_env: "PATH={{ jkspath }}:{{ ansible_env.PATH }}"

                  - name: Ensure /tmp/keystore directory exists
                    file:
                      path: /tmp/keystore
                      state: directory
                      mode: '0755'

                  - name: Verify Java and keytool availability
                    shell: |
                      which java && java -version 2>&1
                      which keytool
                    environment:
                      PATH: "{{ java_env }}"
                    register: java_check
                    changed_when: false

                  - name: Extract DName from keystore
                    shell: |
                      keytool -list -v -keystore "{{ keystore_path }}" -alias "{{ aliasName }}" -storepass "{{ storepass }}" > /tmp/keystore/{{ aliasName }}_output.txt
                      grep -E 'Owner:|Subject:' /tmp/keystore/{{ aliasName }}_output.txt | head -n 1 | sed 's/.*: //' > /tmp/keystore/{{ aliasName }}_dname.txt
                    environment:
                      PATH: "{{ java_env }}"
                    args:
                      executable: /bin/bash

                  - name: Read extracted DName
                    command: cat /tmp/keystore/{{ aliasName }}_dname.txt
                    register: dname_output

                  - name: Set DName fact
                    set_fact:
                      dname: "{{ dname_output.stdout | trim }}"

                  - name: Generate self-signed certificate
                    shell: |
                      keytool -selfcert -alias "{{ aliasName }}" -keystore "{{ keystore_path }}" -dname "{{ dname }}" -validity {{ validity }} -storepass "{{ storepass }}"
                    environment:
                      PATH: "{{ java_env }}"
                    args:
                      executable: /bin/bash

                  - name: Set CATALINA_HOME environment variable system-wide
                    copy:
                      dest: /etc/profile.d/catalina_home.sh
                      content: |
                        export CATALINA_HOME={{ tomcat_path }}
                      mode: '0755'

                  - name: Stop Tomcat using shutdown.sh
                    ansible.builtin.shell: "{{ tomcat_path }}/bin/shutdown.sh 2>&1"
                    ignore_errors: yes  #in case Tomcat is already stopped

                  - name: Wait for Tomcat to stop completely
                    pause:
                      seconds: 2

                  - name: Start Tomcat using startup.sh
                    ansible.builtin.shell: "nohup {{ tomcat_path }}/bin/startup.sh"
                    become: yes
                    become_user: root

                  - name: Delay to make sure service has time to start
                    pause:
                      seconds: 5

              `
      - action: assign
        name: Assign_1
        variable: $test
        value: $ForEachCert.item.metadata.alias
      - action: system/Common/Array/Array Push
        name: AddResult
        inputs:
          - name: array
            value: $result
          - name: item
            value: $RenewalScript.error
variables:
  - name: result
    required: false
    isInput: false
    isOutput: true
    level: INTERMEDIATE
    type:
      type: array
    value: "[]"
  - name: keystore
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
  - name: storepass
    required: false
    isInput: false
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '""'
  - name: ansibleAuth
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '"ibmconcert/Ansible"'
    meta:
      authType: ANY
      subType: authentication
  - name: validity
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '"20"'
  - name: tomcatPath
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '"/opt/tomcat"'
  - name: passwordMap
    required: true
    isInput: true
    isOutput: false
    level: INTERMEDIATE
    type:
      type: string
    value: '"ibmconcert/Tomcat_Config_Data"'
    meta:
      authType: ANY
      subType: authentication
  - name: certificates
    required: false
    isInput: true
    isOutput: true
    level: INTERMEDIATE
    type:
      type: array
    value: "[{\"alias\": \"tomcat\"}]"
  - name: test
    required: false
    isInput: false
    isOutput: true
    level: INTERMEDIATE
    type:
      type: any
    value: '""'
meta:
  workerGroup: default
  description: "This workflow manages a Java keystore on a Windows host by extracting\
    \ the distinguished name (DName) and generating a self-signed certificate. It\
    \ updates the CATALINA_HOME environment variable, and safely stops and restarts\
    \ the Tomcat server using its batch scripts. The playbook ensures proper environment\
    \ setup and introduces delays to handle service readiness."
  layout: flow
  version: 5
  tags:
    - name: Consumer
      value: Concert
    - name: Category
      value: Certificates
finally: null
